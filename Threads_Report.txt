Results of running threads program with command line parameter set to: 

1 - Thread zero accessed the shared variable 21 times, from 0 to 20, being 20 final.

2 - Thread zero accessed the shared variable 21 times and thread 1 21 times. 
    However, the shared variable was accessed in no particular order. 
    Thread 0 saw 40 as its final value and thread 1 saw 36.
    The final value seen by the first thread that finished, was also by the other thread still working.
    Final values for all  threads are different. 
    Values go from 0 to 40.
    
3 - Thread zero, one and 2,  accessed the shared variable 21 times each.
    However, the final value seen by the thread that finishes first is seen by the thread that continues working, and so on.
    Final Values for all threads are different. 
    Values go from 0 to 60. 
    
4 - Thread zero, one, two and three, accessed the shared variable 21 times each.
    However, the final value seen by the thread that finishes first is seen by the thread that continues working, and so on.
    Final Values for all threads are different. 
    Values go from 0 to 80.
    
5 - Thread zero, one, two, three and four, accessed the shared variable 21 times each. 
    However, the final value seen by the thread that finishes first is seen by the thread that continues working, and so on.
    Final Values for all threads are different. 
    Values go from 0 to 100.
    
    Conclusion - Threads execute randomly and out of order. If there are n threads, n-1 values are seen by two threads,
    one sees it as final and the other one as a normal value. ALl threads have different final values. 
